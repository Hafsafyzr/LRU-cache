class Node:
    def __init__(self, key, val):
        self.prev = None
        self.key = key
        self.val = val
        self.next = None

class LRU:
    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = {}
        self.head = Node(0, 0)
        self.tail = Node(0, 0)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.hits = 0
        self.misses = 0
        
    #adding node to front
    def add_node(self, node):
        node.prev = self.head
        node.next = self.head.next
        self.head.next.prev = node
        self.head.next = node

    def remove_node(self, node):
        prev = node.prev
        nxt = node.next
        prev.next = nxt
        nxt.prev = prev

    def move_to_front(self, node):
        self.remove_node(node)
        self.add_node(node)

    def get(self, key):
        if key in self.cache:
            node = self.cache[key]
            self.move_to_front(node)
            self.hits += 1
            return node.val
        self.misses += 1
        return -1

    def put(self, key, value):
        if key in self.cache:
            node = self.cache[key]
            node.val = value
            self.move_to_front(node)
            self.hits += 1

        else:
            if len(self.cache) == self.capacity:
                del_key = self.tail.prev.key
                del self.cache[del_key]
                self.remove_node(self.tail.prev)
                new_node = Node(key, value)
                self.cache[key] = new_node
                self.add_node(new_node)

            new_node = Node(key, value)
            self.cache[key] = new_node
            self.add_node(new_node)
            self.misses += 1


    def traverse(self):
        current = self.head.next
        while current.next is not None:
            print(f"Key: {current.key}, Value: {current.val}")
            current = current.next

    def get_miss_rate(self):
        total_accesses = self.hits + self.misses
        if total_accesses == 0:
            return 0.0
        return(self.misses / total_accesses)*100

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Test the LRU cache
lrucache = LRU(50)

# Fill the cache with keys 0-49
value = 0
for i in range(50):
    lrucache.put(i, value)
    value += 1

# Retrieve values for odd-numbered keys
for i in range(1, 100, 2):
    lrucache.get(i)

# Fill the cache with prime number keys 0-100
for i in range(101):
    if is_prime(i):
        lrucache.put(i, i)

print("Hits: ",lrucache.hits)
print("Misses: ",lrucache.misses)
print("Total accesses: ",lrucache.misses+lrucache.hits)
print(lrucache.get_miss_rate())
